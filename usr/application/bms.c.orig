#include <stdint.h>

#include  <ucos_ii.h>

#include "common/PosixError.h"
#include "common/log_print.h"
#include "can_dispatcher.h"
#include "bsp_io.h"
#include "dio.h"
#include "bms.h"

static battery_info_t  s_battery_info;
static int can_user;

static void query_battery_info_tmrcb(void* tmr, void*data);
static int can_msg_process(int usr, CanRxMsg* msg);

int bms_init(void)
{
    s_battery_info.state = BATTERY_STATE_NORMAL;
    s_battery_info.voltage = 0;
    s_battery_info.current = 0;
    s_battery_info.power = 0;
    s_battery_info.temperature = 0;

    can_user = can_dispatcher_register_user("bms", can_msg_process);

    return 0;
}

int bms_run(void)
{
    uint8_t err;
    OS_TMR  *query_tmr;

    query_tmr = OSTmrCreate(10, 10, OS_TMR_OPT_PERIODIC,
                          query_battery_info_tmrcb, NULL, "bms-query", &err);
    if(query_tmr == NULL)
    {
        APP_TRACE("BMS create timer failed.\r\n");
        return -PERR_ENOMEM;
    }

    OSTmrStart(query_tmr, &err);

    return 0;
}

const battery_info_t *bms_get_battery_info(void)
{
    return &s_battery_info;
}

int bms_charge(int on)
{
    if(on)
        bsp_DoSet(DO_BATTERY_CHARGE, 1);
    else
        bsp_DoSet(DO_BATTERY_CHARGE, 0);

    return 0;
}

static int can_msg_process(int usr, CanRxMsg* msg)
{
    uint16_t tmp;

    if( (msg->IDE != CAN_Id_Standard) || (msg->RTR != CAN_RTR_Data) 
        || (msg->StdId != 0x10) )
        return -PERR_ENOTSUP;

    //OSSchedLock();

    tmp = ((uint16_t)msg->Data[0])<<8 | msg->Data[1];
    s_battery_info.voltage = tmp/10.0;

    tmp = ((uint16_t)msg->Data[2])<<8 | msg->Data[3];
    s_battery_info.current = tmp/10.0;

    s_battery_info.power = msg->Data[4];
    s_battery_info.temperature= msg->Data[5]-40;
    s_battery_info.state = msg->Data[6];

<<<<<<< HEAD
=======
    APP_TRACE("BMS: power= %d%% volt=%f\r\n", s_battery_info.power,
              s_battery_info.voltage);

    return EOK;
>>>>>>> dev
    //OSSchedUnlock();
    return PERR_EOK;
}

/*
 *  Query the general infomation of battery
 */
static void query_battery_info_tmrcb(void* tmr, void*data)
{
    CanTxMsg txmsg;

    txmsg.StdId = 0x16;
    txmsg.IDE = CAN_Id_Standard;
    txmsg.RTR = CAN_RTR_Data;

    txmsg.DLC = 8;

    txmsg.Data[0] = 0x16;
    txmsg.Data[1] = 0xBB;
    memset(&txmsg.Data[2], 0, 5);
    txmsg.Data[7] = 0x7E;

    can_dispatcher_send_msg(can_user, &txmsg);

}

